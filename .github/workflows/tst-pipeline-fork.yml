on:
  repository_dispatch:
    types: [ ok-to-test-command ]
name: Run acceptance tests [fork]

jobs:
  test-with-output-secrets:
    if: |
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.args.named.sha != '' &&
      contains(
        github.event.client_payload.pull_request.head.sha,
        github.event.client_payload.slash_command.args.named.sha
      )
    uses: edif2008/test-gh-action/.github/workflows/reuse.yml@main
    secrets: inherit
    with:
      secret: op://acceptance-tests/test-secret/password
      secret-in-section: op://acceptance-tests/test-secret/test-section/password
      multiline-secret: op://acceptance-tests/multiline-secret/notesPlain
      export-env: false
  test-with-export-env:
    if: |
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.args.named.sha != '' &&
      contains(
        github.event.client_payload.pull_request.head.sha,
        github.event.client_payload.slash_command.args.named.sha
      )
    uses: edif2008/test-gh-action/.github/workflows/reuse.yml@main
    secrets: inherit
    with:
      secret: op://acceptance-tests/test-secret/password
      secret-in-section: op://acceptance-tests/test-secret/test-section/password
      multiline-secret: op://acceptance-tests/multiline-secret/notesPlain
      export-env: true
  test-references-with-ids:
    if: |
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.args.named.sha != '' &&
      contains(
        github.event.client_payload.pull_request.head.sha,
        github.event.client_payload.slash_command.args.named.sha
      )
    uses: edif2008/test-gh-action/.github/workflows/reuse.yml@main
    secrets: inherit
    with:
      secret: op://ar3v2gmnw73p4bhkphr7t6rv44/buujcg6tsnf7yesmrjxdiwq4bq/password
      secret-in-section: op://ar3v2gmnw73p4bhkphr7t6rv44/buujcg6tsnf7yesmrjxdiwq4bq/Section_eq2lfsibpwk5bnorxvvjgmqily/wv6wvz2cpwn7grtb43durk7yxy
      multiline-secret: op://ar3v2gmnw73p4bhkphr7t6rv44/x3tei6c67qbhifrnrrxvq7ox2u/notesPlain
      export-env: false
  update-checks:
    # required permissions for updating the status of the pull request checks
    permissions:
      pull-requests: write
      checks: write
    runs-on: ubuntu-latest
    if: ${{ always() }}
    strategy:
      matrix:
        job-name: [test-with-output-secrets, test-references-with-ids, test-with-export-env]
    needs: [test-with-output-secrets, test-references-with-ids, test-with-export-env]
    steps:
      - uses: actions/github-script@v6
        env:
          job: ${{ matrix.job-name }}
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
          conclusion: ${{ needs[format('{0}', matrix.job-name )].result }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref: process.env.ref
            });

            const check = checks.check_runs.filter(c => c.name === process.env.job);

            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });

            return result;
      # - uses: actions/github-script@v6
      #   env:
      #     job: ${{ needs.test-with-output-secrets }}
      #     ref: ${{ github.event.client_payload.pull_request.head.sha }}
      #     # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
      #     conclusion: ${{ needs.test-with-output-secrets.result }} 
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const { data: checks } = await github.rest.checks.listForRef({
      #         ...context.repo,
      #         ref: process.env.ref
      #       });

      #       const check = checks.check_runs.filter(c => c.name === process.env.job);

      #       const { data: result } = await github.rest.checks.update({
      #         ...context.repo,
      #         check_run_id: check[0].id,
      #         status: 'completed',
      #         conclusion: process.env.conclusion
      #       });

      #       return result;
      # - uses: actions/github-script@v6
      #   env:
      #     job: ${{ needs.test-with-export-env.result }}
      #     ref: ${{ github.event.client_payload.pull_request.head.sha }}
      #     # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
      #     conclusion: ${{ needs.test-with-export-env.result }} 
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const { data: checks } = await github.rest.checks.listForRef({
      #         ...context.repo,
      #         ref: process.env.ref
      #       });

      #       const check = checks.check_runs.filter(c => c.name === process.env.job);

      #       const { data: result } = await github.rest.checks.update({
      #         ...context.repo,
      #         check_run_id: check[0].id,
      #         status: 'completed',
      #         conclusion: process.env.conclusion
      #       });

      #       return result;
      # - uses: actions/github-script@v6
      #   env:
      #     job: ${{ needs.test-references-with-ids.result }}
      #     ref: ${{ github.event.client_payload.pull_request.head.sha }}
      #     # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
      #     conclusion: ${{ needs.test-references-with-ids.result }} 
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const { data: checks } = await github.rest.checks.listForRef({
      #         ...context.repo,
      #         ref: process.env.ref
      #       });

      #       const check = checks.check_runs.filter(c => c.name === process.env.job);

      #       const { data: result } = await github.rest.checks.update({
      #         ...context.repo,
      #         check_run_id: check[0].id,
      #         status: 'completed',
      #         conclusion: process.env.conclusion
      #       });

      #       return result;
