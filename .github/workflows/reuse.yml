name: Acceptance-tests

on:
  workflow_call:
    inputs:
      secret:
        required: true
        type: string
      secret-in-section:
        required: true
        type: string
      multiline-secret:
        required: true
        type: string
      export-env:
        required: true
        type: boolean

jobs:
  acceptance-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        auth: [connect, service-account]
        export-env: [true, false]
        exclude:
          - os: macos-latest
            auth: connect
    runs-on: ${{ matrix.os }}
    steps:
      - name: Base checkout
        uses: actions/checkout@v4
        if: |
          github.event_name != 'repository_dispatch' &&
          (
            github.ref == 'refs/heads/main' || 
            (
              github.event_name == 'pull_request' && 
              github.event.pull_request.head.repo.full_name == github.repository
            )
          )
      - name: Fork based /ok-to-test checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
        if: |
          github.event_name == 'repository_dispatch' &&
          github.event.client_payload.slash_command.args.named.sha != '' &&
          contains(
            github.event.client_payload.pull_request.head.sha,
            github.event.client_payload.slash_command.args.named.sha
          )
      - name: Launch 1Password Connect instance
        if: ${{ matrix.auth == 'connect' }}
        env:
          OP_CONNECT_CREDENTIALS: ${{ secrets.OP_CONNECT_CREDENTIALS }}
        run: |
          echo "$OP_CONNECT_CREDENTIALS" > 1password-credentials.json
          docker compose -f tests/fixtures/docker-compose.yml up -d && sleep 10
      - name: Configure Service account
        if: ${{ matrix.auth == 'service-account' }}
        uses: ./configure
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
      - name: Configure 1Password Connect
        if: ${{ matrix.auth == 'connect' }}
        uses: ./configure # 1password/load-secrets-action/configure@<version>
        with:
          connect-host: http://localhost:8080
          connect-token: ${{ secrets.OP_CONNECT_TOKEN }}
      - name: Load secrets
        id: load_secrets
        uses: ./ # 1password/load-secrets-action@<version>
        with:
          export-env: ${{ matrix.export-env }}
        env:
          SECRET: ${{ inputs.secret }}
          SECRET_IN_SECTION: ${{ inputs.secret-in-section }}
          MULTILINE_SECRET: ${{ inputs.multiline-secret }}
      - name: Assert test secret values [step output]
        if: ${{ !inputs.export-env }}
        env:
          SECRET: ${{ steps.load_secrets.outputs.SECRET }}
          SECRET_IN_SECTION: ${{ steps.load_secrets.outputs.SECRET_IN_SECTION }}
          MULTILINE_SECRET: ${{ steps.load_secrets.outputs.MULTILINE_SECRET }}
        run: ./tests/assert-env-set.sh
      - name: Assert test secret values
        if: ${{ matrix.export-env }}
        run: ./tests/assert-env-set.sh
      - name: Remove secrets
        if: ${{ matrix.export-env }}
        uses: ./ # 1password/load-secrets-action@<version>
        with:
          unset-previous: true
      - name: Assert removed secrets
        if: ${{ matrix.export-env }}
        run: ./tests/assert-env-unset.sh
  # test-with-export-env:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, macos-latest]
  #       auth: [connect, service-account]
  #       exclude:
  #         - os: macos-latest
  #           auth: connect
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Launch 1Password Connect instance
  #       if: ${{ matrix.auth == 'connect' }}
  #       env:
  #         OP_CONNECT_CREDENTIALS: ${{ secrets.OP_CONNECT_CREDENTIALS }}
  #       run: |
  #         echo "$OP_CONNECT_CREDENTIALS" > 1password-credentials.json
  #         docker compose -f tests/fixtures/docker-compose.yml up -d && sleep 10
  #     - name: Configure Service account
  #       if: ${{ matrix.auth == 'service-account' }}
  #       uses: ./configure
  #       with:
  #         service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
  #     - name: Configure 1Password Connect
  #       if: ${{ matrix.auth == 'connect' }}
  #       uses: ./configure # 1password/load-secrets-action/configure@<version>
  #       with:
  #         connect-host: http://localhost:8080
  #         connect-token: ${{ secrets.OP_CONNECT_TOKEN }}
  #     - name: Load secrets
  #       id: load_secrets
  #       uses: ./ # 1password/load-secrets-action@<version>
  #       env:
  #         SECRET: op://acceptance-tests/test-secret/password
  #         SECRET_IN_SECTION: op://acceptance-tests/test-secret/test-section/password
  #         MULTILINE_SECRET: op://acceptance-tests/multiline-secret/notesPlain
  #     - name: Assert test secret values
  #       run: ./tests/assert-env-set.sh
  #     - name: Remove secrets
  #       uses: ./ # 1password/load-secrets-action@<version>
  #       with:
  #         unset-previous: true
  #     - name: Assert removed secrets
  #       run: ./tests/assert-env-unset.sh
  # test-references-with-ids:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, macos-latest]
  #       auth: [connect, service-account]
  #       exclude:
  #         - os: macos-latest
  #           auth: connect
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Launch 1Password Connect instance
  #       if: ${{ matrix.auth == 'connect' }}
  #       env:
  #         OP_CONNECT_CREDENTIALS: ${{ secrets.OP_CONNECT_CREDENTIALS }}
  #       run: |
  #         echo "$OP_CONNECT_CREDENTIALS" > 1password-credentials.json
  #         docker compose -f tests/fixtures/docker-compose.yml up -d && sleep 10
  #     - name: Configure Service account
  #       if: ${{ matrix.auth == 'service-account' }}
  #       uses: ./configure
  #       with:
  #         service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
  #     - name: Configure 1Password Connect
  #       if: ${{ matrix.auth == 'connect' }}
  #       uses: ./configure # 1password/load-secrets-action/configure@<version>
  #       with:
  #         connect-host: http://localhost:8080
  #         connect-token: ${{ secrets.OP_CONNECT_TOKEN }}
  #     - name: Load secrets
  #       id: load_secrets
  #       uses: ./ # 1password/load-secrets-action@<version>
  #       with:
  #         export-env: false
  #       env:
  #         SECRET: op://ar3v2gmnw73p4bhkphr7t6rv44/buujcg6tsnf7yesmrjxdiwq4bq/password
  #         SECRET_IN_SECTION: op://ar3v2gmnw73p4bhkphr7t6rv44/buujcg6tsnf7yesmrjxdiwq4bq/Section_eq2lfsibpwk5bnorxvvjgmqily/wv6wvz2cpwn7grtb43durk7yxy
  #         MULTILINE_SECRET: op://ar3v2gmnw73p4bhkphr7t6rv44/x3tei6c67qbhifrnrrxvq7ox2u/notesPlain
  #     - name: Assert test secret values
  #       env:
  #         SECRET: ${{ steps.load_secrets.outputs.SECRET }}
  #         SECRET_IN_SECTION: ${{ steps.load_secrets.outputs.SECRET_IN_SECTION }}
  #         MULTILINE_SECRET: ${{ steps.load_secrets.outputs.MULTILINE_SECRET }}
  #       run: ./tests/assert-env-set.sh
